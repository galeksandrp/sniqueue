package tls

import (
	"testing"

	"github.com/google/go-cmp/cmp"
)

func Test_clientHelloMsg_unmarshalTCP(t *testing.T) {
	tests := []struct {
		name    string
		quic    bool
		want    *ClientHello
		payload []byte
		wantErr bool
	}{
		{
			name: "TCP ClientHello",
			want: &ClientHello{
				SNI: "api.dropboxapi.com",
			},
			payload: []byte{
				0x03, 0x01, 0x00, 0xd4, 0x01, 0x00, 0x00,
				0xd0, 0x03, 0x03, 0x60, 0xdf, 0x27, 0x98, 0x68,
				0xff, 0x4b, 0x46, 0x1f, 0xdd, 0x43, 0x03, 0xf7,
				0xba, 0xb4, 0xd5, 0x1e, 0xaa, 0xce, 0xe8, 0xcd,
				0xa5, 0xe7, 0xca, 0x70, 0xb7, 0xea, 0x88, 0xad,
				0x69, 0xb3, 0x5d, 0x00, 0x00, 0x44, 0x00, 0xff,
				0xc0, 0x2c, 0xc0, 0x2b, 0xc0, 0x24, 0xc0, 0x23,
				0xc0, 0x0a, 0xc0, 0x09, 0xc0, 0x08, 0xc0, 0x30,
				0xc0, 0x2f, 0xc0, 0x28, 0xc0, 0x27, 0xc0, 0x14,
				0xc0, 0x13, 0xc0, 0x12, 0x00, 0x9f, 0x00, 0x9e,
				0x00, 0x6b, 0x00, 0x67, 0x00, 0x39, 0x00, 0x33,
				0x00, 0x16, 0x00, 0x9d, 0x00, 0x9c, 0x00, 0x3d,
				0x00, 0x3c, 0x00, 0x35, 0x00, 0x2f, 0x00, 0x0a,
				0x00, 0xaf, 0x00, 0xae, 0x00, 0x8d, 0x00, 0x8c,
				0x00, 0x8b, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00,
				0x00, 0x17, 0x00, 0x15, 0x00, 0x00, 0x12, 0x61,
				0x70, 0x69, 0x2e, 0x64, 0x72, 0x6f, 0x70, 0x62,
				0x6f, 0x78, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
				0x6d, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x06, 0x00,
				0x17, 0x00, 0x18, 0x00, 0x19, 0x00, 0x0b, 0x00,
				0x02, 0x01, 0x00, 0x00, 0x0d, 0x00, 0x12, 0x00,
				0x10, 0x04, 0x01, 0x02, 0x01, 0x05, 0x01, 0x06,
				0x01, 0x04, 0x03, 0x02, 0x03, 0x05, 0x03, 0x06,
				0x03, 0x00, 0x10, 0x00, 0x0b, 0x00, 0x09, 0x08,
				0x68, 0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31,
				0x00, 0x05, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x17, 0x00,
				0x00,
			},
			wantErr: false,
		},
		{
			name: "Quic ClientHello 1",
			want: &ClientHello{SNI: "r2---sn-fxc25nn-nwje.googlevideo.com"},
			payload: []byte{
				0x06, 0x00, 0x41, 0x54, 0x01, 0x00, 0x01, 0x50,
				0x03, 0x03, 0x0e, 0x04, 0x01, 0xdc, 0xe9, 0xfe,
				0xc9, 0x3f, 0x34, 0x84, 0x5e, 0xc3, 0xe2, 0x31,
				0x40, 0x61, 0x7c, 0x23, 0x20, 0xfc, 0xe4, 0xfb,
				0x1c, 0x06, 0x64, 0xf9, 0xdd, 0x25, 0xa6, 0x44,
				0x30, 0xd3, 0x00, 0x00, 0x06, 0x13, 0x01, 0x13,
				0x02, 0x13, 0x03, 0x01, 0x00, 0x01, 0x21, 0x00,
				0x00, 0x00, 0x29, 0x00, 0x27, 0x00, 0x00, 0x24,
				0x72, 0x32, 0x2d, 0x2d, 0x2d, 0x73, 0x6e, 0x2d,
				0x66, 0x78, 0x63, 0x32, 0x35, 0x6e, 0x6e, 0x2d,
				0x6e, 0x77, 0x6a, 0x65, 0x2e, 0x67, 0x6f, 0x6f,
				0x67, 0x6c, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6f,
				0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x0a, 0x00, 0x08,
				0x00, 0x06, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x18,
				0x00, 0x10, 0x00, 0x05, 0x00, 0x03, 0x02, 0x68,
				0x33, 0x00, 0x0d, 0x00, 0x14, 0x00, 0x12, 0x04,
				0x03, 0x08, 0x04, 0x04, 0x01, 0x05, 0x03, 0x08,
				0x05, 0x05, 0x01, 0x08, 0x06, 0x06, 0x01, 0x02,
				0x01, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00,
				0x1d, 0x00, 0x20, 0xae, 0x5b, 0xad, 0x96, 0xba,
				0x2b, 0x53, 0xae, 0xed, 0x0b, 0x2c, 0x21, 0x40,
				0x7d, 0xc5, 0xae, 0xbc, 0xd1, 0xdc, 0xd3, 0xd7,
				0x16, 0x4f, 0xa2, 0x65, 0x97, 0xee, 0x60, 0x96,
				0x1c, 0x58, 0x65, 0x00, 0x2d, 0x00, 0x02, 0x01,
				0x01, 0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04,
				0x00, 0x39, 0x00, 0x7c, 0x01, 0x04, 0x80, 0x00,
				0x75, 0x30, 0x03, 0x02, 0x45, 0xc0, 0x04, 0x04,
				0x80, 0xf0, 0x00, 0x00, 0x05, 0x04, 0x80, 0x60,
				0x00, 0x00, 0x06, 0x04, 0x80, 0x60, 0x00, 0x00,
				0x07, 0x04, 0x80, 0x60, 0x00, 0x00, 0x08, 0x02,
				0x40, 0x64, 0x09, 0x02, 0x40, 0x67, 0x20, 0x04,
				0x80, 0x01, 0x00, 0x00, 0x71, 0x27, 0x04, 0x80,
				0x02, 0x55, 0x8b, 0x0f, 0x00, 0x71, 0x29, 0x2b,
				0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2f, 0x39,
				0x31, 0x2e, 0x30, 0x2e, 0x34, 0x34, 0x37, 0x32,
				0x2e, 0x31, 0x31, 0x34, 0x20, 0x49, 0x6e, 0x74,
				0x65, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x20, 0x4f,
				0x53, 0x20, 0x58, 0x20, 0x31, 0x30, 0x5f, 0x31,
				0x35, 0x5f, 0x37, 0x80, 0x00, 0x47, 0x52, 0x04,
				0x00, 0x00, 0x00, 0x01, 0xeb, 0x04, 0xfb, 0x07,
				0x25, 0x42, 0x4d, 0xf3, 0x03, 0x4a, 0x43, 0xce,
				0x00, 0x1b, 0x00, 0x03, 0x02, 0x00, 0x02, 0x44,
				0x69, 0x00, 0x05, 0x00, 0x03, 0x02, 0x68, 0x33,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			},
			wantErr: false,
		},
		{
			name: "QUIC ClientHello 2",
			want: &ClientHello{SNI: "easylist.to"},
			payload: []byte{
				0x06, 0x00, 0x42, 0x00, 0x01, 0x00, 0x01, 0xfc,
				0x03, 0x03, 0x12, 0x3e, 0x93, 0x0d, 0xdb, 0xdb,
				0x28, 0xa9, 0xc2, 0xa8, 0x27, 0xc2, 0xd9, 0xb6,
				0x45, 0x36, 0x12, 0xb8, 0xe5, 0x98, 0x3d, 0x90,
				0x09, 0x71, 0x7b, 0x00, 0xe6, 0xa5, 0xa5, 0x57,
				0xfa, 0xb6, 0x00, 0x00, 0x06, 0x13, 0x01, 0x13,
				0x03, 0x13, 0x02, 0x01, 0x00, 0x01, 0xcd, 0x00,
				0x00, 0x00, 0x10, 0x00, 0x0e, 0x00, 0x00, 0x0b,
				0x65, 0x61, 0x73, 0x79, 0x6c, 0x69, 0x73, 0x74,
				0x2e, 0x74, 0x6f, 0x00, 0x17, 0x00, 0x00, 0xff,
				0x01, 0x00, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x14,
				0x00, 0x12, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x18,
				0x00, 0x19, 0x01, 0x00, 0x01, 0x01, 0x01, 0x02,
				0x01, 0x03, 0x01, 0x04, 0x00, 0x10, 0x00, 0x08,
				0x00, 0x06, 0x05, 0x68, 0x33, 0x2d, 0x32, 0x37,
				0x00, 0x05, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x22, 0x00, 0x0a, 0x00, 0x08, 0x04,
				0x03, 0x05, 0x03, 0x06, 0x03, 0x02, 0x03, 0x00,
				0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00,
				0x20, 0x39, 0x9d, 0xe5, 0x71, 0xd4, 0x52, 0xfd,
				0x3f, 0x54, 0x9d, 0x7c, 0x01, 0x2c, 0x18, 0x8a,
				0x25, 0x68, 0xcc, 0x35, 0xe1, 0xb4, 0x29, 0xeb,
				0x0c, 0x4c, 0x5a, 0x0a, 0xf9, 0xf3, 0xf4, 0x3e,
				0x5c, 0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04,
				0x00, 0x0d, 0x00, 0x18, 0x00, 0x16, 0x04, 0x03,
				0x05, 0x03, 0x06, 0x03, 0x02, 0x03, 0x08, 0x04,
				0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01,
				0x06, 0x01, 0x02, 0x01, 0x00, 0x2d, 0x00, 0x02,
				0x01, 0x01, 0x00, 0x1c, 0x00, 0x02, 0x40, 0x01,
				0xff, 0xa5, 0x00, 0x35, 0x01, 0x04, 0x80, 0x00,
				0x75, 0x30, 0x0c, 0x00, 0x0e, 0x01, 0x08, 0x07,
				0x04, 0x80, 0x10, 0x00, 0x00, 0x09, 0x01, 0x10,
				0x0f, 0x03, 0x9f, 0x9c, 0xb1, 0x08, 0x01, 0x10,
				0x06, 0x04, 0x80, 0x10, 0x00, 0x00, 0x05, 0x04,
				0x80, 0x10, 0x00, 0x00, 0x6a, 0xb2, 0x00, 0x04,
				0x08, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff, 0x00, 0x15, 0x00, 0xdf, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := &ClientHello{}

			if err := got.Unmarshal(tt.payload); err != nil {
				if tt.wantErr {
					return
				}
				t.Fatalf("Unmarshal() error = %v, wantErr %v", err, tt.wantErr)
			}
			if tt.wantErr {
				return
			}
			if diff := cmp.Diff(tt.want, got); diff != "" {
				t.Fatalf("unexpected first message bytes (-want +got):\n%s", diff)
			}
		})
	}
}
