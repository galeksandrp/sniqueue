package parse

import (
	"testing"

	"github.com/google/go-cmp/cmp"
)

func TestQuic_unmarshal(t *testing.T) {
	tests := []struct {
		name    string
		payload []byte
		want    *Quic
		wantErr bool
	}{
		{
			name:    "Version1",
			payload: goodQUICInitial,
			want: &Quic{
				Hello: quickHelloMsg{SNI: "r2---sn-fxc25nn-nwje.googlevideo.com"},
				Header: &ExtendedHeader{
					Header: Header{
						TypeByte:         192,
						IsLongHeader:     true,
						ParsedLen:        19,
						DestConnectionID: []uint8{0xc3, 0xc3, 0xa5, 0x0f, 0xa4, 0x2a, 0xe0, 0x7d},
						Version:          1,
						Length:           1312,
						Token:            []uint8{},
					},
					PacketNumberLen: 1,
					PacketNumber:    1,
				},
				Payload: []byte{
					0x06, 0x00, 0x41, 0x54, 0x01, 0x00, 0x01, 0x50,
					0x03, 0x03, 0x0e, 0x04, 0x01, 0xdc, 0xe9, 0xfe,
					0xc9, 0x3f, 0x34, 0x84, 0x5e, 0xc3, 0xe2, 0x31,
					0x40, 0x61, 0x7c, 0x23, 0x20, 0xfc, 0xe4, 0xfb,
					0x1c, 0x06, 0x64, 0xf9, 0xdd, 0x25, 0xa6, 0x44,
					0x30, 0xd3, 0x00, 0x00, 0x06, 0x13, 0x01, 0x13,
					0x02, 0x13, 0x03, 0x01, 0x00, 0x01, 0x21, 0x00,
					0x00, 0x00, 0x29, 0x00, 0x27, 0x00, 0x00, 0x24,
					0x72, 0x32, 0x2d, 0x2d, 0x2d, 0x73, 0x6e, 0x2d,
					0x66, 0x78, 0x63, 0x32, 0x35, 0x6e, 0x6e, 0x2d,
					0x6e, 0x77, 0x6a, 0x65, 0x2e, 0x67, 0x6f, 0x6f,
					0x67, 0x6c, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6f,
					0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x0a, 0x00, 0x08,
					0x00, 0x06, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x18,
					0x00, 0x10, 0x00, 0x05, 0x00, 0x03, 0x02, 0x68,
					0x33, 0x00, 0x0d, 0x00, 0x14, 0x00, 0x12, 0x04,
					0x03, 0x08, 0x04, 0x04, 0x01, 0x05, 0x03, 0x08,
					0x05, 0x05, 0x01, 0x08, 0x06, 0x06, 0x01, 0x02,
					0x01, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00,
					0x1d, 0x00, 0x20, 0xae, 0x5b, 0xad, 0x96, 0xba,
					0x2b, 0x53, 0xae, 0xed, 0x0b, 0x2c, 0x21, 0x40,
					0x7d, 0xc5, 0xae, 0xbc, 0xd1, 0xdc, 0xd3, 0xd7,
					0x16, 0x4f, 0xa2, 0x65, 0x97, 0xee, 0x60, 0x96,
					0x1c, 0x58, 0x65, 0x00, 0x2d, 0x00, 0x02, 0x01,
					0x01, 0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04,
					0x00, 0x39, 0x00, 0x7c, 0x01, 0x04, 0x80, 0x00,
					0x75, 0x30, 0x03, 0x02, 0x45, 0xc0, 0x04, 0x04,
					0x80, 0xf0, 0x00, 0x00, 0x05, 0x04, 0x80, 0x60,
					0x00, 0x00, 0x06, 0x04, 0x80, 0x60, 0x00, 0x00,
					0x07, 0x04, 0x80, 0x60, 0x00, 0x00, 0x08, 0x02,
					0x40, 0x64, 0x09, 0x02, 0x40, 0x67, 0x20, 0x04,
					0x80, 0x01, 0x00, 0x00, 0x71, 0x27, 0x04, 0x80,
					0x02, 0x55, 0x8b, 0x0f, 0x00, 0x71, 0x29, 0x2b,
					0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2f, 0x39,
					0x31, 0x2e, 0x30, 0x2e, 0x34, 0x34, 0x37, 0x32,
					0x2e, 0x31, 0x31, 0x34, 0x20, 0x49, 0x6e, 0x74,
					0x65, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x20, 0x4f,
					0x53, 0x20, 0x58, 0x20, 0x31, 0x30, 0x5f, 0x31,
					0x35, 0x5f, 0x37, 0x80, 0x00, 0x47, 0x52, 0x04,
					0x00, 0x00, 0x00, 0x01, 0xeb, 0x04, 0xfb, 0x07,
					0x25, 0x42, 0x4d, 0xf3, 0x03, 0x4a, 0x43, 0xce,
					0x00, 0x1b, 0x00, 0x03, 0x02, 0x00, 0x02, 0x44,
					0x69, 0x00, 0x05, 0x00, 0x03, 0x02, 0x68, 0x33,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|................|
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +|.......|
				},
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := &Quic{}
			if err := got.unmarshal(tt.payload); err != nil {
				if tt.wantErr {
					return
				}
				t.Fatalf("unmarshal() error = %v, wantErr %v", err, tt.wantErr)
			}
			if tt.wantErr {
				return
			}
			if diff := cmp.Diff(tt.want, got); diff != "" {
				t.Fatalf("unexpected result (-want +got):\n%s", diff)
			}
		})
	}
}
